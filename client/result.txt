Consistency and CAP
• Types of consistency
• Examples
• CAP theorem
2
Availability / fault tolerance
•Computers crash, it will happen…
•Only way to keep your system available is with multiple computers
•A system that keeps running in presence of  failures is fault tolerant
2
Load
Balancer
3
Example: S3 is fault tolerant
• Buckets are replicated across all sites in a region in case one 
of the sites loses power / network connectivity…
Ohio (us-east-2)
4
Interesting question…
• What type of consistency does AWS guarantee?
Ohio (us-east-2)
If we upload an image to S3, 
how soon is it available in all 
3 sites?  
What if a download request 
is routed to a site that hasn't 
finished replicating? What 
happens? What does AWS 
guarantee, if anything? 
5
Consistency
•Whenever data is replicated, there is a possibility of  inconsistency.
• Example: x =1. An update is then sent to three replicas:
Put x=2
Didn’t get the change 
yet, still think x=1
Got it! x=2
Communication and queueing 
delays are unpredictable.  We 
can send messages, but we 
don’t know exactly when 
they’ll arrive.
Get x Query returns inconsistent answers!2 1 1
56
Types of  consistency
•Eventual
•An update to a distributed system will *eventually* yield a 
consistent view
•BASE:
• Basically-available
• Soft-state
• Eventually-consistent
•Strong
•A distributed system provides a single, consistent view at all times
•ACID:
• Atomic
• Consistent
• Isolated
• Durable
6
The type of  consistency impacts how 
you call / use a given service. Can 
you trust the response you get?7
S3?  Answer…
• The image will be available for download no matter 
which site is accessed
– AWS S3 guarantees strong consistency
– The client's view of S3 is THE SAME across all sites
Ohio (us-east-2)
8
Banks require strongly consistency
•Suppose a bank account has exactly $1,000
•How does the bank prevent two different people from 
withdrawing $1,000 from that account at the same time?
8
9
Databases are strongly consistent
• Most DB systems offer strong consistency
• This is HARD to implement:
– Must replicate data so it's accessible at all times anywhere
– Must ensure a strongly consistent view of all data!
10
10
MySQL Cluster
•MySQL Cluster is a distributed database system
• Replicates the data across multiple servers for fault tolerance
• Still guarantees strong consistency
MySQL High Availability Cluster11
Example
• Banks cannot risk losing track of customer $
• Banks use a DB to keep track…
• Transferring $ requires two SQL queries:
  -- withdraw from checking
  UPDATE Accounts
  SET    Balance = Balance – 100.00
  WHERE  Account = 22197;
  -- deposit into savings
  UPDATE Accounts
  SET    Balance = Balance + 100.00
  WHERE  Account = 43992;
What if the computer crashes 
right here? The money would 
be lost… What must be done 
to ensure strong consistency?
12
Answer
• You must wrap the SQL within a transaction
• Databases are strongly consistent only in the 
presence of properly-written transactions…
BEGIN TRANSACTION;
  -- withdraw from checking
  UPDATE Accounts
  SET    Balance = Balance – 100.00
  WHERE  Account = 22197;
  -- deposit into savings
  UPDATE Accounts
  SET    Balance = Balance + 100.00
  WHERE  Account = 43992;
COMMIT;
13
CAP Theorem
One of  the most important results in distributed systems theory
Theorem: a distributed system cannot achieve all three of  the following:
•Consistency: reads always return the most recent write (or an error)
•Availability: every request receives a timely, non-error response
•Partition tolerance: the system continues to operate even in the presence of  
failures (software, hardware, network, power, etc.)
You have to pick two…
14
• Consistency: reads always return the most recent write (or error)
• Availability: every request receives a timely, non-error response
• Partition tolerance: the system continues to operate even in the 
presence of  failures (software, hardware, network, power, etc.)
Implications?
Redundancy is the only way to achieve partition tolerance, i.e. 
fault-tolerant, highly-available systems. So you always choose P .
This implies architects have to choose between 
• Availability (AP): returning an answer to the client that may be inconsistent (old)
or
• Consistency (CP): making the client wait until consistent answer is available (in the 
worst-case, request could error/timeout & client will have to try again)
CAP Theorem implications Pick Two: CA, CP , AP15
Client-centric consistency models
•The CAP theorem gives us a tradeoff  between consistency & delay
•Inconsistency is bothersome --- makes client-side programming harder
• Example: imagine if  the database gave different answers to the same query?!
•Delay is usually something client-side apps can handle…
Most architects agree that CP is the right choice
• Client-side code is less complex
• In almost all systems, you want correct responses over fast 
(but wrong) responses
• Good summary from a Google architect
16
S3: eventual to strongly consistent
• In 2020, S3 was redesigned to be strongly 
consistent
– https://www.allthingsdistributed.com/2021/04/s3-strong-consistency.html
What did they give up?17
Consistency is a subtle topic, with many models.
That's it, thank you! What is CAP theorem? What is the CAP theorem? The CAP theorem is one of the most important results in distributed systems theory. According to the theorem, a distributed system cannot achieve all three of the following: 

1. Consistency: reads always return the most recent write or an error.
2. Availability: every request receives a timely, non-error response.
3. Partition tolerance: the system continues to operate even in the presence of failures, like software, hardware, network, power, etc.

In this context, architects have to choose between availability and consistency when designing a system. CAP theorem, consistency Review Sheet:

1. CAP Theorem:
   - The CAP theorem is a fundamental principle guiding the design of distributed systems. 
   - It states that it's impossible for a distributed system to simultaneously provide all three of the following guarantees: Consistency, Availability, and Partition tolerance. 
   - Consistency is the property that reads always return the most recent write or an error. 
   - Availability guarantees that every request receives a timely non-error response. 
   - Partition tolerance ensures that the system continues to function notwithstanding failures such as software, hardware, network, or power issues.
   - This theorem implies that architects need to make a choice between availability and consistency when designing a distributed system.
   
2. Consistency:
   - It is critical when data is replicated across multiple nodes. As soon as a change has been made to one node, that change must be propagated to all other nodes in a predictable and managed way.
   - There are two primary types of consistency models: Eventual and Strong.
   - Eventual Consistency: This concept means that the system will become consistent over time, given that no new updates are made. This situation ensures high availability while handling inconsistencies for a certain duration.
   - Strong Consistency: Here, all operations are atomic. The system appears as a single, consistent entity to the client. Thus, any read operation always reflects the most recent write operation.
   - Most database systems offer strong consistency because they ensure a globally consistent view of all data.
   - Client-centric consistency models focus on making client-side programming easier and reducing the complexity of dealing with inconsistencies.
   
These concepts are absolutely critical when designing a robust, reliable, and efficient system. It's important to understand these topics thoroughly and choose the right model based on the specific requirements of your system. CAP theorem, consistency Review Sheet:

1. CAP Theorem:
   - The CAP theorem is a fundamental principle guiding the design of distributed systems. 
   - It states that it's impossible for a distributed system to simultaneously provide all three of the following guarantees: Consistency, Availability, and Partition tolerance. 
   - Consistency is the property that reads always return the most recent write or an error. 
   - Availability guarantees that every request receives a timely non-error response. 
   - Partition tolerance ensures that the system continues to function notwithstanding failures such as software, hardware, network, or power issues.
   - This theorem implies that architects need to make a choice between availability and consistency when designing a distributed system.
   
2. Consistency:
   - It is critical when data is replicated across multiple nodes. As soon as a change has been made to one node, that change must be propagated to all other nodes in a predictable and managed way.
   - There are two primary types of consistency models: Eventual and Strong.
   - Eventual Consistency: This concept means that the system will become consistent over time, given that no new updates are made. This situation ensures high availability while handling inconsistencies for a certain duration.
   - Strong Consistency: Here, all operations are atomic. The system appears as a single, consistent entity to the client. Thus, any read operation always reflects the most recent write operation.
   - Most database systems offer strong consistency because they ensure a globally consistent view of all data.
   - Client-centric consistency models focus on making client-side programming easier and reducing the complexity of dealing with inconsistencies.
   
These concepts are absolutely critical when designing a robust, reliable, and efficient system. It's important to understand these topics thoroughly and choose the right model based on the specific requirements of your system. CAP theorem, consistency